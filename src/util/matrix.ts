export const m4 = {
    create: () => new Float32Array([1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1]),
    perspective: (out: Float32Array, fov: number, aspect: number, near: number, far: number) => { const f = 1 / Math.tan(fov * 0.5), nf = 1 / (near - far); out.set([f/aspect, 0, 0, 0, 0, f, 0, 0, 0, 0, (far + near) * nf, -1, 0, 0, 2 * far * near * nf, 0]) },
    translate: (out: Float32Array, a: Float32Array, v: number[]) => { if (out !== a) out.set(a); out[12] = a[0] * v[0] + a[4] * v[1] + a[8] * v[2] + a[12]; out[13] = a[1] * v[0] + a[5] * v[1] + a[9] * v[2] + a[13]; out[14] = a[2] * v[0] + a[6] * v[1] + a[10] * v[2] + a[14]; out[15] = a[3] * v[0] + a[7] * v[1] + a[11] * v[2] + a[15] },
    rotateX: (out: Float32Array, a: Float32Array, rad: number) => { const s = Math.sin(rad), c = Math.cos(rad), a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11]; if (a !== out) { out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3]; out[12] = a[12]; out[13] = a[13]; out[14] = a[14]; out[15] = a[15] }; out[4] = a10 * c + a20 * s; out[5] = a11 * c + a21 * s; out[6] = a12 * c + a22 * s; out[7] = a13 * c + a23 * s; out[8] = a20 * c - a10 * s; out[9] = a21 * c - a11 * s; out[10] = a22 * c - a12 * s; out[11] = a23 * c - a13 * s },
    rotateY: (out: Float32Array, a: Float32Array, rad: number) => { const s = Math.sin(rad), c = Math.cos(rad), a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3], a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11]; if (a !== out) { out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7]; out[12] = a[12]; out[13] = a[13]; out[14] = a[14]; out[15] = a[15] }; out[0] = a00 * c - a20 * s; out[1] = a01 * c - a21 * s; out[2] = a02 * c - a22 * s; out[3] = a03 * c - a23 * s; out[8] = a00 * s + a20 * c; out[9] = a01 * s + a21 * c; out[10] = a02 * s + a22 * c; out[11] = a03 * s + a23 * c },
    multiply: (out: Float32Array, a: Float32Array, b: Float32Array) => { const a00=a[0], a01=a[1], a02=a[2], a03=a[3], a10=a[4], a11=a[5], a12=a[6], a13=a[7], a20=a[8], a21=a[9], a22=a[10], a23=a[11], a30=a[12], a31=a[13], a32=a[14], a33=a[15], b00=b[0], b01=b[1], b02=b[2], b03=b[3], b10=b[4], b11=b[5], b12=b[6], b13=b[7], b20=b[8], b21=b[9], b22=b[10], b23=b[11], b30=b[12], b31=b[13], b32=b[14], b33=b[15]; out[0] = b00*a00 + b01*a10 + b02*a20 + b03*a30; out[1] = b00*a01 + b01*a11 + b02*a21 + b03*a31; out[2] = b00*a02 + b01*a12 + b02*a22 + b03*a32; out[3] = b00*a03 + b01*a13 + b02*a23 + b03*a33; out[4] = b10*a00 + b11*a10 + b12*a20 + b13*a30; out[5] = b10*a01 + b11*a11 + b12*a21 + b13*a31; out[6] = b10*a02 + b11*a12 + b12*a22 + b13*a32; out[7] = b10*a03 + b11*a13 + b12*a23 + b13*a33; out[8] = b20*a00 + b21*a10 + b22*a20 + b23*a30; out[9] = b20*a01 + b21*a11 + b22*a21 + b23*a31; out[10] = b20*a02 + b21*a12 + b22*a22 + b23*a32; out[11] = b20*a03 + b21*a13 + b22*a23 + b23*a33; out[12] = b30*a00 + b31*a10 + b32*a20 + b33*a30; out[13] = b30*a01 + b31*a11 + b32*a21 + b33*a31; out[14] = b30*a02 + b31*a12 + b32*a22 + b33*a32; out[15] = b30*a03 + b31*a13 + b32*a23 + b33*a33 }
}
